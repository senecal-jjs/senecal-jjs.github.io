---
layout: post
title:  MiniMax & Game Playing AI
date:   2018-06-27 17:30:16
description: An exploration of game playing AI's, starting with an implementation of the MiniMax algorithm. 
---

Game playing AI's have achieved a great deal of sucess recently. I'm thinking about agents like AlphaGo that is capable of defeating world class GO players, or more recently the agent from agent from OpenAI, that they call <a target="_blank" href="https://blog.openai.com/openai-five/">OpenAI Five</a>. An agent trained using reinforcement learning that has begun to beat amateur human teams at the video game Dota 2. As OpenAI puts it, "Dota 2 is one of the most popular and complex esports games in the world, with creative and motivated professionals who train year-round to earn part of Dotaâ€™s annual $40M prize pool (the largest of any esports game)."

Algorithms for playing games have quite a long history 

<style media="screen" type="text/css">
    #buttons {
    text-align: center;
    padding-bottom: 10px;
    }

    button {
    font-size: 18px;
    background-color: rgb(163, 163, 163);
    border-radius: 5px;
    }

    .container {
        max-width: 600px;
        max-height: 600px;
        background-color: #f1f0ef;
        display: grid;
        grid-template: repeat(3, 1fr) / repeat(3, 1fr);
        margin: 0 auto;
        font-family: "Helvetica", sans-serif;
    }
    
    .container .box {
        border-style: solid;
        border-color: rgb(143, 143, 143);
        color: rgb(107, 107, 107);
        min-width: 200px;
        min-height: 200px;
        background-color: #82caca;
        text-align: center;
        vertical-align: middle;
        line-height: 200px;
        font-size: 80px;
    }
    
    .container #um {
        grid-area: 1 / 2 / span 1 / span 1;
    }
    
    .container #ur {
        grid-area: 1 / 3 / span 1 / span 1;
    }
    
    .container #ml {
        grid-area: 2 / 1 / span 1 / span 1;
    }
    
    .container #mm {
        grid-area: 2 / 2 / span 1 / span 1;
    }
    
    .container #mr {
        grid-area: 2 / 3 / span 1 / span 1;
    }
    
    .container #ll {
        grid-area: 3 / 1 / span 1 / span 1;
    }
    
    .container #lm {
        grid-area: 3 / 2 / span 1 / span 1;
    }
    
    .container #lr {
        grid-area: 3 / 3 / span 1 / span 1;
    }
</style>

<script src="{{ site.baseurl }}/assets/js/Node.js" type="text/javascript"></script>
<script src="{{ site.baseurl }}/assets/js/Tree.js" type="text/javascript"></script>

<div id="buttons">
    <button onclick="first()">First Player</button> 
    <button onclick="second()">Second Player</button> 
    <button onclick="reset()">Reset</button>
</div>

<div class="container">
    <div class="box" id="ul"></div>
    <div class="box" id="um"></div>
    <div class="box" id="ur"></div>
    <div class="box" id="ml"></div>
    <div class="box" id="mm"></div>
    <div class="box" id="mr"></div>
    <div class="box" id="ll"></div>
    <div class="box" id="lm"></div>
    <div class="box" id="lr"></div>
</div>

<script type="text/javascript" src="{{ site.baseurl }}/assets/js/boardDisplay.js"></script>

<script>
        // If human chooses to go second the AI will make an initial random move
        function second() {
            let gameBoard = ["", "", "", "", "", "", "", "", ""];
            gameBoard = randomMove("O", gameBoard); 
            gameAI = new AI(gameBoard, "X", false);
        }
        
        // If human chooses to go first we wait for the human to make a move
        // then update the game board and initialize the AI 
        firstVal = false;
        function first() {
            let gameBoard = ["", "", "", "", "", "", "", "", ""];
            firstVal = true;
        }

        // reset the game board
        function reset() {
            let boxes = document.querySelectorAll('.box');
            boxes.forEach((box) => {
                box.textContent = "";
                box.classList.remove('X');
                box.classList.remove('O');
            })
        }
        
        // Add event listener for when a box is clicked by user
        const buttons = document.querySelectorAll('.box');
        buttons.forEach((button) => {
        button.addEventListener('click', function(e){
            let id = e.target.id;
            let box = document.querySelector('#' + id);
            if (box.textContent != 'X' && box.textContent != 'O') {
                // Draw human move
                draw(id, 'X');

                // If human played first we need to initialize the game AI with the initial game board
                if (firstVal) {
                    console.log('check');
                    gameBoard = translate(true, null);
                    gameAI = new AI(gameBoard, "O", true);
                    firstVal = false; 
                }
                
                // Translate the current game board to an array and update the current root of the game 
                // possibilities tree
                let nextBoard = translate(true, null);
                gameAI.updateRoot(nextBoard);

                // Check for human win
                if (gameAI.currentRoot.isLeaf && gameAI.currentRoot.value !=0) {
                    alert("You win!");
                } else if(gameAI.currentRoot.isLeaf && gameAI.currentRoot.value == 0){
                    alert("Draw!");
                }
                
                // Choose AI action based on minimax
                nextBoard = gameAI.chooseAction();

                // Draw the AI move 
                translate(false, nextBoard);

                // Check for AI win
                if (gameAI.currentRoot.isLeaf && gameAI.currentRoot.value != 0) {
                    alert("You lose!");
                } else if(gameAI.currentRoot.isLeaf && gameAI.currentRoot.value == 0) {
                    alert("Draw!");
                }
                
            } else {
                alert("This location has already been played!");
            }
        })
        })
</script>
